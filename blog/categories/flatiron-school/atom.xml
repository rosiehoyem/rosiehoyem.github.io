<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flatiron School | Programming the City]]></title>
  <link href="http://rosiehoyem.github.io/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://rosiehoyem.github.io/"/>
  <updated>2013-12-11T14:38:45-05:00</updated>
  <id>http://rosiehoyem.github.io/</id>
  <author>
    <name><![CDATA[Rosie Hoyem]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mapping Trees in NYC]]></title>
    <link href="http://rosiehoyem.github.io/blog/2013/12/11/mapping-trees-in-nyc/"/>
    <updated>2013-12-11T09:38:00-05:00</updated>
    <id>http://rosiehoyem.github.io/blog/2013/12/11/mapping-trees-in-nyc</id>
    <content type="html"><![CDATA[<p>For my third Rails app at the Flatiron School I teamed up with <a href="http://bandanakm.tumblr.com/post/63283234718/programming-in-space-ruby-meets-geolocation">Bana</a> and we set-out to learn some different geo tools and to also use one of the datasets off of NYC’s Open Data portal.<!-- more --></p>

<p>The NYC Open Data portal is powered by <a href="http://www.socrata.com/">Socrata</a>, a data technology firm out of Seattle. NYC Open Data makes the wealth of public data generated by various New York City agencies and other City organizations available for public use. The platform provides access to hundreds of datasets and comes equipt with an array of tools to make working this data easier and more accessible to wider range of technical levels.</p>

<p>We came across a <a href="http://nycdoitt.tumblr.com/post/31290798672/this-weekend-the-new-york-city-departments-of">post on the NYC ITT Tumblr</a> about a Data Kind DataDive in which they explored NYC Open Data. One of the highlighted datasets was the tree census datasets, including info on every street tree in the five boroughs of NYC. This rich data set seemed like a excellent opportunity to explore geo tools as well as NYC’s urban forest.</p>

<h3>Tools</h3>

<p>The <a href="http://www.rubygeocoder.com/">Geocoder Gem</a> proved to be a simple and effective solution to geocoding addresses. Our app includes some simple functionality to add a tree to the dataset by either A. collecting location information from a mobile device or computer, or B. by geocoding an address. There was also a great <a href="http://railscasts.com/">Railscast</a> that helped us get started.</p>

<p>We used <a href="https://cartodb.com/">CartoDB</a> to map the datasets. CartoDB handled the large number of data points with ease and created beautiful maps in no time. It easily geocoded all of the addresses, though we did run into limitations regarding the number of points the free plan would support.</p>

<iframe width='100%' height='520' frameborder='0' src='http://rosiehoyem.cartodb.com/viz/4541226e-6201-11e3-a53d-1fb48dd48efd/embed_map?title=true&description=true&search=false&shareable=false&cartodb_logo=true&layer_selector=false&legends=false&scrollwheel=true&sublayer_options=1&sql=&sw_lat=40.717055500886445&sw_lon=-74.14501190185547&ne_lat=40.822880013260004&ne_lon=-73.71620178222656'></iframe>


<p><a href="https://nycopendata.socrata.com/">Open Data NYC</a> is part of an initiative to improve the accessibility, transparency, and accountability of City government. The tree census data had already been used to explore how the City’s tree species composition changed over time, to predict where our urban forest will be most vulnerable to storms, and if programmatic maintenance reduced future citizen requests in an area such as tree pruning.</p>

<h3>Next Steps:</h3>

<p>We hope to finish up the front-end work next week after the madness of our Flatiron School experience is done and deploy to Heroku. This is an app that really needs a mobile companion. Perhaps if I’ll try my luck with Ruby Motion over the holidays.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Bucketliztr]]></title>
    <link href="http://rosiehoyem.github.io/blog/2013/11/21/introducing-bucketliztr/"/>
    <updated>2013-11-21T14:22:00-05:00</updated>
    <id>http://rosiehoyem.github.io/blog/2013/11/21/introducing-bucketliztr</id>
    <content type="html"><![CDATA[<p>Last week we started Rails and I immediately picked up an old project idea I had started last summer while working through the Hartl Tutorial. <!-- more -->I scrapped that repository and started from scratch. It seemed like a simple little project, but quickly proved to loaded with lots of small challenges.</p>

<h3>Features</h3>

<p>The beta version includes only the basic ability to create a bucket list. No bells and whistles (yet!). The site includes a simple data model with only two models and one controller.</p>

<p><a href="">Railscasts</a> are awesome and were a huge help during this project. Ryan Bates has covered hundreds of topics in clear concise little screencasts accompanied by succinct code. These little bite-size rails bits make the building of our a few different features of this site much easier, including the nested form, the mailer, and the soon to be deployed authentication system.</p>

<p>This was my first try at <a href="http://railscasts.com/episodes/196-nested-model-form-revised">nested forms</a>. I decided to implement the new user and new bucket list form in the same view. I also got a bit of practice with jQuery to dynamically render a new bucket list item partial.</p>

<p>With the help of <a href="http://vicfriedman.github.io/">Victoria Friedman</a>, another Flatiron alum who visited the school last Saturday, I was able to work with Active Mailer to set-up a confirmation e-mail.</p>

<h3>Lessons Learned</h3>

<p>This was also my first try at using a downloaded bootstrap theme for the front end styling. I, of course, chose a crazy <a href="https://wrapbootstrap.com/">Wrap Bootstrap</a> theme completed jazzed out with paralax. It probably would have worked fine if I hadn’t wanted to customize it. As soon as I started chopping up the index page, it broke. Surprise surprise. So this means I also got an intimate look at the workings of a complex CSS/JS template. It was a learning experience indeed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Technology Imitating Life Imitating Technology]]></title>
    <link href="http://rosiehoyem.github.io/blog/2013/11/19/technology-imitating-life-imitating-technology/"/>
    <updated>2013-11-19T09:17:00-05:00</updated>
    <id>http://rosiehoyem.github.io/blog/2013/11/19/technology-imitating-life-imitating-technology</id>
    <content type="html"><![CDATA[<p>Honestly, I haven’t loved learning to program. I LOVE Rails though, and as a result, I think I am enjoying the nuts and bolts of programming more as well. <!-- more -->I’ve been thinking about why this could be, and I’ve come to the conclusion that Rails is a closer match for how my brain has been trained to work. It is designed at a higher level of abstraction that can more easily be related to things that I do understand in the real world. Let me explain via the example of the city interpretted as a model, view, and controller.</p>

<h4>Model</h4>

<p>The model of city could be compared to the laws. We are a society shaped by laws. They govern how we build (building codes), how we move through the city (traffic laws), how we relate to each other, etc.  Just a like a program that throws errors when you disobey the rules in the model, we punish citizens for breaking the law by issuing violations and putting people in prison. Just like our models, laws are a deliberate design element of our society that shape the ideal world we would like to live in and they can change.</p>

<h4>View</h4>

<p>The view of a city, the interface if you will, is the city itself. Just like for a user of software, the interface is the program. Our experience of both a city and a website is what we see, touch, and interact with. We know there are laws written down somewhere and people who deal with these things (lawyers, judges, and politicians), but, for the vast majority of us, we don’t really think about it.</p>

<p>Architects are like front end developers. They create the built environment we see around us. They must follow the rules though. They also think about how citizens interact with interface.</p>

<h4>Controller</h4>

<p>The controller is like the verb of the city. It is how a person navigates the city to go from their home to work to a bar and back home. At first I had a hard thinking about a parallel structure in the city that plays the same role as the controller, then it kind of dawned on me… What in society allows us to navigate activate views and create resources… For better or worse, the only thing I could think of was currency. I don’t mean currency in strict sense of money. Currency can come in many forms, but we</p>

<p>Now, why I love rails.</p>

<p>A few years ago I read What Technology Wants. This new theory of technology offers three practical lessons:
1. By listening to what technology wants we can better prepare ourselves and our children for the inevitable technologies to come.
2. By adopting the principles of pro-action and engagement, we can steer technologies into their best roles.
3. And by aligning ourselves with the long-term imperatives of this near-living system, we can capture its full gifts.</p>

<p>The moral of the story is that when I look at rails, I see an elegant synthesis of human creations, which is exactly what I see when I look at the city. Rails is a continuation of everything that has come before. Rails is an elegant synthesis of many parts, many technologies, the fruits of many brilliant minds. It is layered and complex and seems to be a living, breathing extension of everyone who has worked on it.</p>

<p>For me, technology gets really interesting when the lines between different disciplines dissolve and we come to the realization we are all talking about the same thing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript, The BIG Todo]]></title>
    <link href="http://rosiehoyem.github.io/blog/2013/11/17/javascript-the-big-todo/"/>
    <updated>2013-11-17T21:10:00-05:00</updated>
    <id>http://rosiehoyem.github.io/blog/2013/11/17/javascript-the-big-todo</id>
    <content type="html"><![CDATA[<p>We’re now into week 8 at the Flatiron School and for the last couple of days we were thrown head-first into Javascript. <!-- more -->This is my ‘Cliff Note’ version of what we covered and my guide for continuing study over the coming weeks and months. Might be a helpful guide for others as well?</p>

<h2>A Few Good Block Posts on Learning Javascript From People Who Know</h2>

<p><em><a href="http://javascriptissexy.com/how-to-learn-javascript-properly/">How to Learn Javascript Properly</a>
</em><a href="http://rmurphey.com/blog/2012/04/12/a-baseline-for-front-end-developers/">A Baseline for Front-End Developers</a>
&hellip;I think we’re seeing the emphasis shift from valuing trivia to valuing tools.</p>

<h2>On-line Basic Tutorials</h2>

<p><em><a href="https://www.codeschool.com/paths/javascript">Code School Javascript Path</a>
</em><a href="http://www.codecademy.com/tracks/javascript">Codecademy Javascript Track</a></p>

<h2>What to Start With? (Advice From a Guest Speaker)</h2>

<ol>
<li>Javascript basics</li>
<li>jQuery (DOM manipulation)</li>
<li>Underscore (How to think about using objects in the browser)</li>
<li>Frameworks: Ember/Backbone</li>
</ol>


<p>When to use jQuery vs. core Javascript: Use JQuery is for interacting with the DOM. Use core javascript for declaring variables, etc.</p>

<h2>The Resource of Choice (“The fine manual”)</h2>

<p><a href="https://developer.mozilla.org/en-US/">Mozillia Developer Network</a>
Alas, there is no manual for front-end development, but this comes pretty close. Good front-end devs know to prefix any search engine query with mdn – for example, mdn javascript arrays – in order to avoid the for-profit plague that is w3schools.</p>

<h2>Presentation by Paul Irish: <a href="http://www.youtube.com/watch?v=f7AU2Ozu8eo">Javascript Workflow</a></h2>

<p><em>Tips for Text Editor Tools: Live Linting, Live Recompilation, Live Reloading
</em>Dependency Management Systems
<em>In Browser Dev Tools
</em>Source URLs
<em>Source Maps
</em>Navigating Scripts</p>

<h2>Templating Tools</h2>

<p><a href="http://garann.github.io/template-chooser/">Template Chooser</a></p>

<h2>Frameworks</h2>

<p><a href="http://backbonejs.org/">Backbone.js</a>
<a href="http://emberjs.com/">Ember</a>
<a href="http://angularjs.org/">Angular</a></p>

<p><a href="http://stackoverflow.com/questions/14395887/what-are-benefits-of-using-backbone-js-vs-ember-js-vs-angular-js">Lots of talk about which to use… </a></p>

<h2>More Advanced Javascript Tools</h2>

<p><a href="http://bower.io/">Bower</a> is a package manager for the web. It offers a generic, unopinionated solution to the problem of front-end package management, while exposing the package dependency model via an API that can be consumed by a more opinionated build stack.</p>

<p>Bower is dependent on Node. Node.js is a platform built on Chrome&rsquo;s JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices. <a href="http://dev.af83.com/2013/01/02/managing-rails-assets-with-bower.html">We can also Manage Rails Assets with Bower</a></p>

<p><a href="http://www.jshint.com/">JSHint</a> is a tool that helps to detect errors and potential problems in your JavaScript code. The goal of this project is to help JavaScript developers write complex programs without worrying about typos and language gotchas.</p>

<p><a href="http://requirejs.org/">RequireJS</a> is a JavaScript file and module loader. It is optimized for in-browser use, but it can be used in other JavaScript environments, like Rhino and Node. Using a modular script loader like RequireJS will improve the speed and quality of your code.</p>

<p><a href="http://underscorejs.org/">Underscore JS</a> is a utility-belt library for JavaScript that provides a lot of the functional programming support that you would expect in <a href="http://prototypejs.org/">Prototype.js</a> (or Ruby), but without extending any of the built-in JavaScript objects. “It&rsquo;s the tie to go along with jQuery&rsquo;s tux, and Backbone.js&rsquo;s suspenders.” (ha, cute.)</p>

<p>Underscore provides 80-odd functions that support both the usual functional suspects:map, select, invoke — as well as more specialized helpers: function binding, javascript templating, deep equality testing, and so on. It delegates to built-in functions, if present, so modern browsers will use the native implementations of forEach, map, reduce, filter, every, some and indexOf.</p>

<p><a href="http://www.w3schools.com/jquery/event_on.asp">jQuery’s On</a> + <a href="http://paularmstrong.github.io/swig/">SWIG Templates</a>
The on() method attaches one or more event handlers for the selected elements and child elements. SWIG is simple, powerful, and extendable JavaScript Template Engine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week Seven Blog Round-Up]]></title>
    <link href="http://rosiehoyem.github.io/blog/2013/11/17/week-seven-blog-round-up/"/>
    <updated>2013-11-17T20:53:00-05:00</updated>
    <id>http://rosiehoyem.github.io/blog/2013/11/17/week-seven-blog-round-up</id>
    <content type="html"><![CDATA[<p>Another week of great posts from the Flatiron students. Here are a few of my favorites. <!-- more --></p>

<p>Ivan&rsquo;s <a href="http://ivanbrennan.github.io/">Other People&rsquo;s Dotfiles</a> is an interested look at an issue I&rsquo;m not super familiar with&mdash;backing up the dot files in my home directory. I plan to return to this later and get my home directory in order.</p>

<p><a href="http://irislee.github.io/">Eights Steps to Create a Simple Capybara Test</a> is a clear discussion of something that we&rsquo;re just now beginning to tackle; writing effective integration tests. This has already come in handy.</p>

<p>Ohhhh the singleton class. Christopher Lee&rsquo;s post <a href="http://clee681.github.io/blog/2013/10/30/demystifying-singleton-classes-and-methods/">Demystifying Singleton Classes and Methods</a> discusses this oft misunderstood concept. (I still don&rsquo;t fully get it.)</p>

<p>I also appreciate Emily Xie&rsquo;s post <a href="http://emilyxxie.github.io/blog/2013/11/04/dynamic-link-generation-in-erb-with-rails/">Link Generation in ERB With Rails</a>, as this is something I&rsquo;m currently working hard to understand.</p>

<p>We&rsquo;re getting to the point where our apps have users and these users need to login. Manu&rsquo;s post [OAuth 2.0 &ndash; What You Need to Know About It for Building Your Next App] (<a href="http://manu3569.github.io/blog/2013/11/06/oauth-2-dot-0-what-you-need-to-know-about-it-for-building-your-next-app/">http://manu3569.github.io/blog/2013/11/06/oauth-2-dot-0-what-you-need-to-know-about-it-for-building-your-next-app/</a>) was a great introduction to this handy tool for creating secure authorization systems for our apps. <a href="http://developer.github.com/v3/oauth/">OAuth</a></p>
]]></content>
  </entry>
  
</feed>
