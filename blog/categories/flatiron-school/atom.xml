<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flatiron School | Programming the City]]></title>
  <link href="http://rosiehoyem.github.io/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://rosiehoyem.github.io/"/>
  <updated>2013-10-31T09:58:33-04:00</updated>
  <id>http://rosiehoyem.github.io/</id>
  <author>
    <name><![CDATA[Rosie Hoyem]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Naming the World]]></title>
    <link href="http://rosiehoyem.github.io/blog/2013/10/30/naming-the-world/"/>
    <updated>2013-10-30T11:39:00-04:00</updated>
    <id>http://rosiehoyem.github.io/blog/2013/10/30/naming-the-world</id>
    <content type="html"><![CDATA[<p>We&rsquo;re coming up on National write a Novel Month. In November you can join thousands of aspiring writers from around the country for National Novel Writing Month (NaNoWriMo). <!-- more --> This event involves writing 1,800 words a day, which after 30 days, will equal the length as a respectable novel. My attempt to log 50,000 words last year was thwarted by a nasty flu in week two that set me hopelessly behind on my word count and work (that&rsquo;s my excuse and I&rsquo;m sticking to it), but NaNoWriMo and I will meet again!</p>

<p>NaNoWri was founded to make a point about writing; the difference between a good writer and a great writer that you may have heard of is largely the number of words a person logs everyday. Sucessful writers write a lot.</p>

<p>The next measure of a great writer vs. a good writer is the quality of the details&mdash;are they true and believeable? Do they contribute to building the story? Language is a dynamic thing, and the art of picking the right word for the right ocassion and expressing ideas clearly is both a skill that comes with experience and an art. I&rsquo;ve been thinking a lot about writing as I learn how to program.</p>

<p>I&rsquo;ve been reading a lot because I spend nearly two hours a day on the train. My current train reading is Jeff Atwood&rsquo;s Effective Programming: More Than Writing Code (<a href="http://www.hyperink.com/Effective-Programming-More-Than-Writing-Code-b1559">Get your copy here!</a>). He is the master mind behind the <a href="http://www.codinghorror.com/blog/">Coding Horror Blog</a> and also co-founded Stack Overflow. In the chapter entitled &lsquo;How to Write Without Writing&rsquo; he emphasizes how important it is for programmers to have good writing and communication skills. I found it quite amusing that he claims part of the reason he founded Stack Overflow was to &ldquo;trick&rdquo; programers into writing. Writing about code forces programmers to communicate more clearly about what they are doing and why.</p>

<p>Writing, clear communication skills, picking works appropriatelly are all important skills for programmers. I want to hit a few relevant topics for programmers that demonstrate this point.</p>

<h2>Naming Things Well</h2>

<blockquote><p>&ldquo;There are two hard things in computer science: cache invalidation, naming things, and off-by-one errors.&rdquo;
<a href="http://martinfowler.com/bliki/TwoHardThings.html">Martin Fowler</a></p></blockquote>

<p>Part of clear communcation in code is naming things well. The names programmers give to variables and methods in their programs matter. Naming things is often sited as one of the most difficult aspects of programing to do well. Jeff&rsquo;s Attwood&rsquo;s post <a href="http://www.codinghorror.com/blog/2006/03/i-shall-call-it-somethingmanager.html">I Shall Call It.. SomethingManager</a> lays out several very important reasons why naming things well <em>really</em> matters in programming.</p>

<p>For one, carfully paying attention to naming things clearly and concisely simply makes your program better. It helps to provide better understanding in the future should your code reused after a long interval of time. It not only makes it easier to read through code and understanding what is going on, it is perhaps low hanging fruit for newbies to attain the professional appearance of work product. It may seem funny in the moment to use cute or comical names. Don&rsquo;t do it. Overly long names or single letter variables also make code more difficult to understand. <a href="http://theprofoundprogrammer.com/post/26561881517/text-single-letter-variables-who-the-fuck-do">Don&rsquo;t do it.</a></p>

<p>Naming things well can also act as a form of metadata for your program. If you feel like you need comments, reconsider how you&rsquo;ve used names for your variables and methods in your code. Comments shouldn&rsquo;t need to explain what a piece of code is doing, they should be used sparingly only to describe <em>why</em> you&rsquo;ve constructed your code the way you have. Use clear and consistent names to promote consistency within a project and on a development team. Everyone&rsquo;s productivity will benefit.</p>

<h2>Naming Conventions that Make Rack Frameworks Work</h2>

<p>Beyond the somewhat subjective benefits of making our code more clear and concise, the most popular Ruby Frameworks, including Sinatra and Rails, are constructed around a variety of naming conventions. Not abiding by these conventions will make your programs not work. When working with ruby frameworks</p>

<p>Just last week my group found this out the hard way. When naming a Sequel table we used <code>candy</code> for our <code>class Candy</code> rather than <code>candies</code>. <a href="http://theprofoundprogrammer.com/post/55025985936/text-have-you-ever-heard-of-naming-conventions">This didn&rsquo;t seem like a major difference&hellip; ?</a> Low and behold, Sequal would not recognize our table because it was looking for the exact plural of our class.</p>

<p>These strict naming conventions will only become more important as we move into Active Record and Rails. Attention to these seemingly small details will be the difference between a things working and not.</p>

<h2>Namespaces</h2>

<p>The idea of namespaces is a broader topic in programming that also amplifies the importance of choosing names well and communicating clearly to the surrounding context. A namespace is a defined area or domain for a set of identifiers or names. Namespaces allows the disambiguation of homonym identifiers residing in different namespaces. Namespaces usually group names based on their functionality, so it is possible to do an endless number of things with limited sets of words.</p>

<h3>In Summary.</h3>

<p>Programming has more in common with creative writing than most would guess. The careful use of words to describe the world around us and inside our programs will make both work better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week Five Blog Round-up]]></title>
    <link href="http://rosiehoyem.github.io/blog/2013/10/30/week-five-blog-round-up/"/>
    <updated>2013-10-30T11:30:00-04:00</updated>
    <id>http://rosiehoyem.github.io/blog/2013/10/30/week-five-blog-round-up</id>
    <content type="html"><![CDATA[<p>Here are a few of the highlights from this week&rsquo;s blog posts from Flatiron students.<!-- more --></p>

<p>Anders&rsquo;s post, <a href="http://coderchronicles.org/2013/10/20/what-i-learned-from-shipping-my-first-ruby-gem/">What I Learned from Shipping my First Gem</a>, was an interesting chromical of his experience creating his first gem. This past weekend Sonja and Charlotte and I shipped our first gem, so it was interesting to hear someone else&rsquo;s experience also. Anders created a simple weather gem to get a super basic weather report at the command line. Check it out: [Simple Forcast[(<a href="https://rubygems.org/gems/simple_forecast">https://rubygems.org/gems/simple_forecast</a>)</p>

<p>Another interesting bit that came from our disucssion was the immense utility of another gem, Chronic](<a href="http://chronic.rubyforge.org/">http://chronic.rubyforge.org/</a>)</p>

<p><a href="http://danielchangnyc.github.io/">Daniel Chang</a>
I had to include Daniel&rsquo;s post on <a href="http://danielchangnyc.github.io/blog/2013/10/23/throw-raise/">Ruby Exceptions</a> because these are things that have been confusing me as of lately. Not any more!</p>

<p>And a quick honable mention for <a href="http://manleyhimself.tumblr.com/">Manley&rsquo;s</a> post on <a href="http://manleyhimself.tumblr.com/">Bash Shortcuts</a>.</p>

<p>Thursday during the Flatiron Presents, <a href="http://polycarpou.github.io/">Michael Polycarpou</a>presented the Breadth First Algorithm. Along with being a fantastic presentation that brought together several different concepts from computing. Avi pointed out that many of the classic algorithms, including the Breadth First Alforithm, can be found on the <a href="http://bigocheatsheet.com/">Big O Cheat Sheet</a>. Not sure what I&rsquo;ll do with it, but taking note for a future day when I&rsquo;m more awesome&hellip; and know what to do with a fancy algorithm.</p>

<p>The other group from Thursday&rsquo;s Flatiron Presents created a fun movie app using Google&rsquo;s <a href="https://developers.google.com/freebase/">Freebase API</a> (page also includes a  nice intro video presentation). I had no idea this existed and&hellip; wow. This appears to be a powerful tool. I look forward to playing with it more when project-mode kicks in.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Gem]]></title>
    <link href="http://rosiehoyem.github.io/blog/2013/10/21/my-first-gem/"/>
    <updated>2013-10-21T14:00:00-04:00</updated>
    <id>http://rosiehoyem.github.io/blog/2013/10/21/my-first-gem</id>
    <content type="html"><![CDATA[<p>I passed a huge milestone in my Ruby career this weekend. I published my first gem. <!-- more --></p>

<p>First let me issue the disclaimer that it really isn&rsquo;t anything to get excited about. It is my first contribution to the world of ruby.</p>

<p>It is called <a href="https://rubygems.org/gems/chillax">Chillax</a>. We went through and scraped some inspirational sayings from some twitter pages. The gem spits out a random quote when you type &lsquo;chillax&rsquo; into the terminal. Not super useful for anything and the code behind the gem is not complicated. We also already found bug that will need to be fixed in version 0.0.2.</p>

<p>It was fun though and it made all three of us feel like we have really gotten somewhere in the past four weeks. WE MADE A GEM! We are now not only users of open source software, we are contributors. In some ways it felt like out initiation. We&rsquo;re in and this is just the beginning.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week Four Blog Round-up]]></title>
    <link href="http://rosiehoyem.github.io/blog/2013/10/19/week-four-blog-round-up/"/>
    <updated>2013-10-19T17:09:00-04:00</updated>
    <id>http://rosiehoyem.github.io/blog/2013/10/19/week-four-blog-round-up</id>
    <content type="html"><![CDATA[<p>Here at the Flatiron School we are encouraged to actively blog. We are also required to present one blog post every two weeks to the group. So much interesting stuff has been coming from my classmates, I decided to do a weekly round-up of some of my favorite posts. <!-- more -->Here are handful of interesting posts from the past week:</p>

<p><a href="http://glamouracademy.github.io/">Charlote Chang</a> blew us away with a fun little blog &lsquo;presentation&rsquo; mixing variable scope and health care politics. Her post, <a href="http://glamouracademy.github.io/blog/2013/10/16/variable-scope-how-i-learned-to-stop-worrying-and-love-the-ruling-class/">Variable Scope: How I Learned to Stop Worrying and Love the Ruling Class</a>, is entertaining and informative not mention beautifully designed.</p>

<p><a href="http://www.trevormckendrick.com/">Trevor McKendrick&rsquo;s</a> last post <a href="http://www.trevormckendrick.com/10-ruby-tricks/">10 Ruby Tricks</a> is nice list of new Ruby bits that I hope to incorporate into my coding immediately. How logical to set default attribute accessors with an attr_accessor_with_default method! And using the &lsquo;-c&rsquo; flat to check the syntax of ruby code without running it&mdash;brilliant.</p>

<p><a href="http://ahimmelstoss.github.io/">Amanda Himelstoss&rsquo;s</a> post <a href="http://ahimmelstoss.github.io/blog/2013/10/11/using-the-mail-gem-and-launchd-to-make-a-newsletter/">Using the Mail Gem and Launchd to Make a Newsletter</a> was a great introduction to a handy little gem, the <a href="http://rubygems.org/gems/mail">Mail Gem</a>, and also a little primer on an aspect of my computer that I haven&rsquo;t explored much, Launchd. When time allows, I hope to make a little app like this collect relevant posts on a particular topic I am interested in.</p>

<p><a href="http://emilyxxie.github.io">Emily Xie&rsquo;s</a> latest post on <a href="http://emilyxxie.github.io/blog/2013/10/14/dynamc-dispatch-101/">Dynamic Dispath</a> was a nice run down of one of the coolest sounding metaprogramming conepts we have covered, <em>Dynamic Dispatch!</em> It feels like you need to shout it. Emily gives some nice examples of how Dynamic Dispatch can be used to write cleaner code.</p>

<p>Last, but not least a few of my classmates made a fun Name Game app and <a href="http://theevo.github.io/blog/2013/10/16/name-game-takeaways/">Theo&rsquo;s post</a> runs down how they did it and few things they learned. Four weeks into the program, it is a bit embarrassing to not know someone&rsquo;s name, so this was a great tool to fill in those last few gaps. It was also great to learn about <a href="http://pages.github.com/">Github Project Pages</a>. I need to start thinking of some fun apps to publish.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Personal Note: Different Kinds of Programmers]]></title>
    <link href="http://rosiehoyem.github.io/blog/2013/10/19/personal-note-different-kinds-of-programmers/"/>
    <updated>2013-10-19T16:11:00-04:00</updated>
    <id>http://rosiehoyem.github.io/blog/2013/10/19/personal-note-different-kinds-of-programmers</id>
    <content type="html"><![CDATA[<p>Today at school we had a guest lecture come by and talk about different types of programmers. <!-- more --></p>

<p>During lunch a few of us reflected on the talk and expressed different types of feelings ranging from digust to dissapointment to the first tinges of regret at our decision to enter this program. (Important detail: We were all women.)</p>

<p>Eric Lubow broke his different types of programmers into five categories ranging from &ldquo;Duct Tape Programmers,&rdquo; the topic of his talk, to Lone Wolf Programmers.</p>

<p>The talk was an interesting glimpse into one of subsets of tech culture. I don&rsquo;t mean to insult his talk when I say that I have high hopes that his world is not the world I am entering.</p>

<p>So maybe we will have to create out world. One where diversity is valued and no jerks are allowed to enter.</p>

<p>Different types of problems demand different strengths, different skill-sets and a new perspective on to solve problems. And some coding skills to implement.</p>

<p>We are learning Ruby, which is a high level programming language supported by a smorgasboard to tools to make writing code easier.</p>

<p>I like to think of myself as aligning with the interests of <a href="http://en.wikipedia.org/wiki/Design_Thinking">Design Thinking</a>. Another intriguing philosophy to me is <a href="http://en.wikipedia.org/wiki/Integrative_thinking">Integrative Thinking</a>.</p>
]]></content>
  </entry>
  
</feed>
