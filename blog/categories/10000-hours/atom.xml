<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 10000 Hours | Programming the City]]></title>
  <link href="http://rosiehoyem.github.io/blog/categories/10000-hours/atom.xml" rel="self"/>
  <link href="http://rosiehoyem.github.io/"/>
  <updated>2013-11-22T08:51:31-05:00</updated>
  <id>http://rosiehoyem.github.io/</id>
  <author>
    <name><![CDATA[Rosie Hoyem]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Technology Imitating Life Imitating Technology]]></title>
    <link href="http://rosiehoyem.github.io/blog/2013/11/19/technology-imitating-life-imitating-technology/"/>
    <updated>2013-11-19T09:17:00-05:00</updated>
    <id>http://rosiehoyem.github.io/blog/2013/11/19/technology-imitating-life-imitating-technology</id>
    <content type="html"><![CDATA[<p>Honestly, I haven’t loved learning to program. I LOVE rails though, and as a result, I think I am enjoying the nuts and bolts of programming more as well. <!-- more -->I’ve been thinking about why this could be, and I’ve come to the conclusion that rails is how my brain has been trained to work. It is designed at a higher level of abstraction that mirrors more closely how the real world works. Let me explain via the example of the city.</p>

<h2>Model &ndash; View &ndash; Controller</h2>

<h4>Model</h4>

<p>The model of city could be compared to the laws. We are a society shaped by laws. They govern how we build (building codes), how we move through the city (traffic laws), how we relate to each other, etc.  Just a like a program that throws errors when you disobey the rules in the model, we punish citizens for breaking the law by issuing violations and putting people in prison. Just like our models, laws are a deliberate design element of our society that shape the ideal world we would like to live in and they can change.</p>

<h4>View</h4>

<p>The view of a city, the interface if you will, is the city itself. Just like for a user of software, the interface is the program. Our experience of both a city and a website is what we see, touch, and interact with. We know there are laws written down somewhere and people who deal with these things (lawyers, judges, and politicians), but, for the vast majority of us, we don’t really think about it.</p>

<p>Architects are like front end developers. They create the built environment we see around us. They must follow the rules though. They also think about how citizens interact with interface.</p>

<h4>Controller</h4>

<p>The controller is like the verb of the city. It is how a person navigates the city to go from their home to work to a bar and back home. At first I had a hard thinking about a parallel structure in the city that plays the same role as the controller, then it kind of dawned on me… What in society allows us to navigate activate views and create resources… For better or worse, the only thing I could think of was currency. I don’t mean currency in strict sense of money. Currency can come in many forms, but we</p>

<p>Now, why I love rails.</p>

<p>A few years ago I read What Technology Wants. This new theory of technology offers three practical lessons:
1. By listening to what technology wants we can better prepare ourselves and our children for the inevitable technologies to come.
2. By adopting the principles of pro-action and engagement, we can steer technologies into their best roles.
3. And by aligning ourselves with the long-term imperatives of this near-living system, we can capture its full gifts.</p>

<p>The moral of the story is that when I look at rails, I see an elegant synthesis of human creations, which is exactly what I see when I look at the city. Rails is a continuation of everything that has come before. Rails is an elegant synthesis of many parts, many technologies, the fruits of many brilliant minds. It is layered and complex and seems to be a living, breathing extension of everyone who has worked on it.</p>

<p>For me, technology gets really interesting when the lines between different disciplines dissolve and we come to the realization we are all talking about the same thing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript, The BIG Todo]]></title>
    <link href="http://rosiehoyem.github.io/blog/2013/11/17/javascript-the-big-todo/"/>
    <updated>2013-11-17T21:10:00-05:00</updated>
    <id>http://rosiehoyem.github.io/blog/2013/11/17/javascript-the-big-todo</id>
    <content type="html"><![CDATA[<p>We’re now into week 8 at the Flatiron School and for the last couple of days we were thrown head-first into Javascript. <!-- more -->This is my ‘Cliff Note’ version of what we covered and my guide for continuing study over the coming weeks and months. Might be a helpful guide for others as well?</p>

<h2>A Few Good Block Posts on Learning Javascript From People Who Know</h2>

<p><em><a href="http://javascriptissexy.com/how-to-learn-javascript-properly/">How to Learn Javascript Properly</a>
</em><a href="http://rmurphey.com/blog/2012/04/12/a-baseline-for-front-end-developers/">A Baseline for Front-End Developers</a>
&hellip;I think we’re seeing the emphasis shift from valuing trivia to valuing tools.</p>

<h2>On-line Basic Tutorials</h2>

<p><em><a href="https://www.codeschool.com/paths/javascript">Code School Javascript Path</a>
</em><a href="http://www.codecademy.com/tracks/javascript">Codecademy Javascript Track</a></p>

<h2>What to Start With? (Advice From a Guest Speaker)</h2>

<ol>
<li>Javascript basics</li>
<li>jQuery (DOM manipulation)</li>
<li>Underscore (How to think about using objects in the browser)</li>
<li>Frameworks: Ember/Backbone</li>
</ol>


<p>When to use jQuery vs. core Javascript: Use JQuery is for interacting with the DOM. Use core javascript for declaring variables, etc.</p>

<h2>The Resource of Choice (“The fine manual”)</h2>

<p><a href="https://developer.mozilla.org/en-US/">Mozillia Developer Network</a>
Alas, there is no manual for front-end development, but this comes pretty close. Good front-end devs know to prefix any search engine query with mdn – for example, mdn javascript arrays – in order to avoid the for-profit plague that is w3schools.</p>

<h2>Presentation by Paul Irish: <a href="http://www.youtube.com/watch?v=f7AU2Ozu8eo">Javascript Workflow</a></h2>

<p><em>Tips for Text Editor Tools: Live Linting, Live Recompilation, Live Reloading
</em>Dependency Management Systems
<em>In Browser Dev Tools
</em>Source URLs
<em>Source Maps
</em>Navigating Scripts</p>

<h2>Templating Tools</h2>

<p><a href="http://garann.github.io/template-chooser/">Template Chooser</a></p>

<h2>Frameworks</h2>

<p><a href="http://backbonejs.org/">Backbone.js</a>
<a href="http://emberjs.com/">Ember</a>
<a href="http://angularjs.org/">Angular</a></p>

<p><a href="http://stackoverflow.com/questions/14395887/what-are-benefits-of-using-backbone-js-vs-ember-js-vs-angular-js">Lots of talk about which to use… </a></p>

<h2>More Advanced Javascript Tools</h2>

<p><a href="http://bower.io/">Bower</a> is a package manager for the web. It offers a generic, unopinionated solution to the problem of front-end package management, while exposing the package dependency model via an API that can be consumed by a more opinionated build stack.</p>

<p>Bower is dependent on Node. Node.js is a platform built on Chrome&rsquo;s JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices. <a href="http://dev.af83.com/2013/01/02/managing-rails-assets-with-bower.html">We can also Manage Rails Assets with Bower</a></p>

<p><a href="http://www.jshint.com/">JSHint</a> is a tool that helps to detect errors and potential problems in your JavaScript code. The goal of this project is to help JavaScript developers write complex programs without worrying about typos and language gotchas.</p>

<p><a href="http://requirejs.org/">RequireJS</a> is a JavaScript file and module loader. It is optimized for in-browser use, but it can be used in other JavaScript environments, like Rhino and Node. Using a modular script loader like RequireJS will improve the speed and quality of your code.</p>

<p><a href="http://underscorejs.org/">Underscore JS</a> is a utility-belt library for JavaScript that provides a lot of the functional programming support that you would expect in <a href="http://prototypejs.org/">Prototype.js</a> (or Ruby), but without extending any of the built-in JavaScript objects. “It&rsquo;s the tie to go along with jQuery&rsquo;s tux, and Backbone.js&rsquo;s suspenders.” (ha, cute.)</p>

<p>Underscore provides 80-odd functions that support both the usual functional suspects:map, select, invoke — as well as more specialized helpers: function binding, javascript templating, deep equality testing, and so on. It delegates to built-in functions, if present, so modern browsers will use the native implementations of forEach, map, reduce, filter, every, some and indexOf.</p>

<p><a href="http://www.w3schools.com/jquery/event_on.asp">jQuery’s On</a> + <a href="http://paularmstrong.github.io/swig/">SWIG Templates</a>
The on() method attaches one or more event handlers for the selected elements and child elements. SWIG is simple, powerful, and extendable JavaScript Template Engine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week Seven Blog Round-Up]]></title>
    <link href="http://rosiehoyem.github.io/blog/2013/11/17/week-seven-blog-round-up/"/>
    <updated>2013-11-17T20:53:00-05:00</updated>
    <id>http://rosiehoyem.github.io/blog/2013/11/17/week-seven-blog-round-up</id>
    <content type="html"><![CDATA[<p>Another week of great posts from the Flatiron students. Here are a few of my favorites. <!-- more --></p>

<p>Ivan&rsquo;s <a href="http://ivanbrennan.github.io/">Other People&rsquo;s Dotfiles</a> is an interested look at an issue I&rsquo;m not super familiar with&mdash;backing up the dot files in my home directory. I plan to return to this later and get my home directory in order.</p>

<p><a href="http://irislee.github.io/">Eights Steps to Create a Simple Capybara Test</a> is a clear discussion of something that we&rsquo;re just now beginning to tackle; writing effective integration tests. This has already come in handy.</p>

<p>Ohhhh the singleton class. Christopher Lee&rsquo;s post <a href="http://clee681.github.io/blog/2013/10/30/demystifying-singleton-classes-and-methods/">Demystifying Singleton Classes and Methods</a> discusses this oft misunderstood concept. (I still don&rsquo;t fully get it.)</p>

<p>I also appreciate Emily Xie&rsquo;s post <a href="http://emilyxxie.github.io/blog/2013/11/04/dynamic-link-generation-in-erb-with-rails/">Link Generation in ERB With Rails</a>, as this is something I&rsquo;m currently working hard to understand.</p>

<p>We&rsquo;re getting to the point where our apps have users and these users need to login. Manu&rsquo;s post [OAuth 2.0 &ndash; What You Need to Know About It for Building Your Next App] (<a href="http://manu3569.github.io/blog/2013/11/06/oauth-2-dot-0-what-you-need-to-know-about-it-for-building-your-next-app/">http://manu3569.github.io/blog/2013/11/06/oauth-2-dot-0-what-you-need-to-know-about-it-for-building-your-next-app/</a>) was a great introduction to this handy tool for creating secure authorization systems for our apps. <a href="http://developer.github.com/v3/oauth/">OAuth</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Naming the World]]></title>
    <link href="http://rosiehoyem.github.io/blog/2013/10/30/naming-the-world/"/>
    <updated>2013-10-30T11:39:00-04:00</updated>
    <id>http://rosiehoyem.github.io/blog/2013/10/30/naming-the-world</id>
    <content type="html"><![CDATA[<p>We&rsquo;re coming up on National write a Novel Month. In November you can join thousands of aspiring writers from around the country for National Novel Writing Month (NaNoWriMo). <!-- more --> This event involves writing 1,800 words a day, which after 30 days, will equal the length as a respectable novel. My attempt to log 50,000 words last year was thwarted by a nasty flu in week two that set me hopelessly behind on my word count and work (that&rsquo;s my excuse and I&rsquo;m sticking to it), but NaNoWriMo and I will meet again!</p>

<p>NaNoWri was founded to make a point about writing; the difference between a good writer and a great writer that you may have heard of is largely the number of words a person logs everyday. Sucessful writers write a lot.</p>

<p>The next measure of a great writer vs. a good writer is the quality of the details&mdash;are they true and believeable? Do they contribute to building the story? Language is a dynamic thing, and the art of picking the right word for the right ocassion and expressing ideas clearly is both a skill that comes with experience and an art. I&rsquo;ve been thinking a lot about writing as I learn how to program.</p>

<p>I&rsquo;ve been reading a lot because I spend nearly two hours a day on the train. My current train reading is Jeff Atwood&rsquo;s Effective Programming: More Than Writing Code (<a href="http://www.hyperink.com/Effective-Programming-More-Than-Writing-Code-b1559">Get your copy here!</a>). He is the master mind behind the <a href="http://www.codinghorror.com/blog/">Coding Horror Blog</a> and also co-founded Stack Overflow. In the chapter entitled &lsquo;How to Write Without Writing&rsquo; he emphasizes how important it is for programmers to have good writing and communication skills. I found it quite amusing that he claims part of the reason he founded Stack Overflow was to &ldquo;trick&rdquo; programers into writing. Writing about code forces programmers to communicate more clearly about what they are doing and why.</p>

<p>Writing, clear communication skills, picking works appropriatelly are all important skills for programmers. I want to hit a few relevant topics for programmers that demonstrate this point.</p>

<h2>Naming Things Well</h2>

<blockquote><p>&ldquo;There are two hard things in computer science: cache invalidation, naming things, and off-by-one errors.&rdquo;
<a href="http://martinfowler.com/bliki/TwoHardThings.html">Martin Fowler</a></p></blockquote>

<p>Part of clear communcation in code is naming things well. The names programmers give to variables and methods in their programs matter. Naming things is often sited as one of the most difficult aspects of programing to do well. Jeff&rsquo;s Attwood&rsquo;s post <a href="http://www.codinghorror.com/blog/2006/03/i-shall-call-it-somethingmanager.html">I Shall Call It.. SomethingManager</a> lays out several very important reasons why naming things well <em>really</em> matters in programming.</p>

<p>For one, carfully paying attention to naming things clearly and concisely simply makes your program better. It helps to provide better understanding in the future should your code reused after a long interval of time. It not only makes it easier to read through code and understanding what is going on, it is perhaps low hanging fruit for newbies to attain the professional appearance of work product. It may seem funny in the moment to use cute or comical names. Don&rsquo;t do it. Overly long names or single letter variables also make code more difficult to understand. <a href="http://theprofoundprogrammer.com/post/26561881517/text-single-letter-variables-who-the-fuck-do">Don&rsquo;t do it.</a></p>

<p>Naming things well can also act as a form of metadata for your program. If you feel like you need comments, reconsider how you&rsquo;ve used names for your variables and methods in your code. Comments shouldn&rsquo;t need to explain what a piece of code is doing, they should be used sparingly only to describe <em>why</em> you&rsquo;ve constructed your code the way you have. Use clear and consistent names to promote consistency within a project and on a development team. Everyone&rsquo;s productivity will benefit.</p>

<h2>Naming Conventions that Make Rack Frameworks Work</h2>

<p>Beyond the somewhat subjective benefits of making our code more clear and concise, the most popular Ruby Frameworks, including Sinatra and Rails, are constructed around a variety of naming conventions. Not abiding by these conventions will make your programs not work. When working with ruby frameworks</p>

<p>Just last week my group found this out the hard way. When naming a Sequel table we used <code>candy</code> for our <code>class Candy</code> rather than <code>candies</code>. <a href="http://theprofoundprogrammer.com/post/55025985936/text-have-you-ever-heard-of-naming-conventions">This didn&rsquo;t seem like a major difference&hellip; ?</a> Low and behold, Sequal would not recognize our table because it was looking for the exact plural of our class.</p>

<p>These strict naming conventions will only become more important as we move into Active Record and Rails. Attention to these seemingly small details will be the difference between a things working and not.</p>

<h2>Namespaces</h2>

<p>The idea of namespaces is a broader topic in programming that also amplifies the importance of choosing names well and communicating clearly to the surrounding context. A namespace is a defined area or domain for a set of identifiers or names. Namespaces allows the disambiguation of homonym identifiers residing in different namespaces. Namespaces usually group names based on their functionality, so it is possible to do an endless number of things with limited sets of words.</p>

<h3>In Summary.</h3>

<p>Programming has more in common with creative writing than most would guess. The careful use of words to describe the world around us and inside our programs will make both work better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week Five Blog Round-up]]></title>
    <link href="http://rosiehoyem.github.io/blog/2013/10/30/week-five-blog-round-up/"/>
    <updated>2013-10-30T11:30:00-04:00</updated>
    <id>http://rosiehoyem.github.io/blog/2013/10/30/week-five-blog-round-up</id>
    <content type="html"><![CDATA[<p>Here are a few of the highlights from this week&rsquo;s blog posts from Flatiron students.<!-- more --></p>

<p>Anders&rsquo;s post, <a href="http://coderchronicles.org/2013/10/20/what-i-learned-from-shipping-my-first-ruby-gem/">What I Learned from Shipping my First Gem</a>, was an interesting chromical of his experience creating his first gem. This past weekend Sonja and Charlotte and I shipped our first gem, so it was interesting to hear someone else&rsquo;s experience also. Anders created a simple weather gem to get a super basic weather report at the command line. Check it out: [Simple Forcast[(<a href="https://rubygems.org/gems/simple_forecast">https://rubygems.org/gems/simple_forecast</a>)</p>

<p>Another interesting bit that came from our disucssion was the immense utility of another gem, Chronic](<a href="http://chronic.rubyforge.org/">http://chronic.rubyforge.org/</a>)</p>

<p><a href="http://danielchangnyc.github.io/">Daniel Chang</a>
I had to include Daniel&rsquo;s post on <a href="http://danielchangnyc.github.io/blog/2013/10/23/throw-raise/">Ruby Exceptions</a> because these are things that have been confusing me as of lately. Not any more!</p>

<p>And a quick honable mention for <a href="http://manleyhimself.tumblr.com/">Manley&rsquo;s</a> post on <a href="http://manleyhimself.tumblr.com/">Bash Shortcuts</a>.</p>

<p>Thursday during the Flatiron Presents, <a href="http://polycarpou.github.io/">Michael Polycarpou</a>presented the Breadth First Algorithm. Along with being a fantastic presentation that brought together several different concepts from computing. Avi pointed out that many of the classic algorithms, including the Breadth First Alforithm, can be found on the <a href="http://bigocheatsheet.com/">Big O Cheat Sheet</a>. Not sure what I&rsquo;ll do with it, but taking note for a future day when I&rsquo;m more awesome&hellip; and know what to do with a fancy algorithm.</p>

<p>The other group from Thursday&rsquo;s Flatiron Presents created a fun movie app using Google&rsquo;s <a href="https://developers.google.com/freebase/">Freebase API</a> (page also includes a  nice intro video presentation). I had no idea this existed and&hellip; wow. This appears to be a powerful tool. I look forward to playing with it more when project-mode kicks in.</p>
]]></content>
  </entry>
  
</feed>
